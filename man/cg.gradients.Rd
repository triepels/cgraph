% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cgraph.R
\name{cg.gradients}
\alias{cg.gradients}
\title{Calculate Gradients}
\arguments{
\item{name}{character scalar or symbol, name of the node that needs to be differentiated.}

\item{values}{named list or environment, values that are subsituted for the expressions and placeholders in the graph.}

\item{index}{numeric scalar, index of the target node that needs to be differentiated. Defaults to the first element.}
}
\value{
cg.results object, the gradients of all nodes evaluated in the backward-pass with respect to node \code{name}.
}
\description{
Differentiate the graph with respect to node \code{name} by reverse automatic differentiation.
}
\details{
\code{$gradients(name, values, index = 1)}
}
\note{
All placeholders and expressions required to compute node \code{name} must have a value. By default, expression nodes are unevaluated. The values of these nodes can be obtained by evaluating the graph using function \code{$run()}. The values obtained by this function for the expression nodes can be supplied along values for the placeholders via argument \code{values}.

Currently, cgraph can only differentiate with respect to a scalar output node. In case the value of output node \code{name} is a vector or an array, \code{index} can be used to specify which element of the vector or array needs to be differentiated.

The gradients of all parameters are returned along with the gradients of all ancestor nodes of node \code{name} that are differentiated in the backward-pass. Constant nodes are not differentiated and their gradients are not returned. Moreover, the gradients of parameters have the same shape as the parameters themselves.
}
\author{
Ron Triepels
}
